const char reduce_flux_ocl[] ={
"\n"
"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
"\n"
"\n"
"#define ANGULAR_FLUX_INDEX(a,g,i,j,k,nang,ng,nx,ny) ((a)+((nang)*(g))+((nang)*(ng)*(i))+((nang)*(ng)*(nx)*(j))+((nang)*(ng)*(nx)*(ny)*(k)))\n"
"#define SCALAR_FLUX_INDEX(g,i,j,k,ng,nx,ny) ((g)+((ng)*(i))+((ng)*(nx)*(j))+((ng)*(nx)*(ny)*(k)))\n"
"\n"
"\n"
"#define angular_flux_in_0(a,g,i,j,k) angular_flux_in_0[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_in_1(a,g,i,j,k) angular_flux_in_1[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_in_2(a,g,i,j,k) angular_flux_in_2[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_in_3(a,g,i,j,k) angular_flux_in_3[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_in_4(a,g,i,j,k) angular_flux_in_4[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_in_5(a,g,i,j,k) angular_flux_in_5[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_in_6(a,g,i,j,k) angular_flux_in_6[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_in_7(a,g,i,j,k) angular_flux_in_7[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_out_0(a,g,i,j,k) angular_flux_out_0[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_out_1(a,g,i,j,k) angular_flux_out_1[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_out_2(a,g,i,j,k) angular_flux_out_2[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_out_3(a,g,i,j,k) angular_flux_out_3[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_out_4(a,g,i,j,k) angular_flux_out_4[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_out_5(a,g,i,j,k) angular_flux_out_5[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_out_6(a,g,i,j,k) angular_flux_out_6[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define angular_flux_out_7(a,g,i,j,k) angular_flux_out_7[ANGULAR_FLUX_INDEX((a),(g),(i),(j),(k),nang,ng,nx,ny)]\n"
"#define scalar_flux(g,i,j,k) scalar_flux[SCALAR_FLUX_INDEX((g),(i),(j),(k),ng,nx,ny)]\n"
"\n"
"// We want to perform a weighted sum of angles in each cell in each energy group\n"
"// One work-group per cell per energy group, and reduce within a work-group\n"
"// Work-groups must be power of two sized\n"
"kernel void reduce_flux(\n"
"    const unsigned int nx,\n"
"    const unsigned int ny,\n"
"    const unsigned int nz,\n"
"    const unsigned int nang,\n"
"    const unsigned int ng,\n"
"\n"
"    global const double * restrict angular_flux_in_0,\n"
"    global const double * restrict angular_flux_in_1,\n"
"    global const double * restrict angular_flux_in_2,\n"
"    global const double * restrict angular_flux_in_3,\n"
"    global const double * restrict angular_flux_in_4,\n"
"    global const double * restrict angular_flux_in_5,\n"
"    global const double * restrict angular_flux_in_6,\n"
"    global const double * restrict angular_flux_in_7,\n"
"\n"
"    global const double * restrict angular_flux_out_0,\n"
"    global const double * restrict angular_flux_out_1,\n"
"    global const double * restrict angular_flux_out_2,\n"
"    global const double * restrict angular_flux_out_3,\n"
"    global const double * restrict angular_flux_out_4,\n"
"    global const double * restrict angular_flux_out_5,\n"
"    global const double * restrict angular_flux_out_6,\n"
"    global const double * restrict angular_flux_out_7,\n"
"\n"
"    global const double * restrict velocity_delta,\n"
"    global const double * restrict quad_weights,\n"
"\n"
"    global double * restrict scalar_flux,\n"
"    local double * restrict local_scalar\n"
"    )\n"
"{\n"
"    const size_t a = get_local_id(0);\n"
"    const size_t g = get_group_id(0);\n"
"\n"
"    const size_t i = get_global_id(1) % nx;\n"
"    const size_t j = (get_global_id(1) / nx) % ny;\n"
"    const size_t k = get_global_id(1) / (nx * ny);\n"
"\n"
"    // Load into local memory\n"
"    local_scalar[a] = 0.0;\n"
"    for (unsigned int aa = a; aa < nang; aa += get_local_size(0))\n"
"    {\n"
"        const double w = quad_weights[aa];\n"
"        if (velocity_delta[g] != 0.0)\n"
"        {\n"
"            local_scalar[a] +=\n"
"                w * (0.5 * (angular_flux_out_0(aa,g,i,j,k) + angular_flux_in_0(aa,g,i,j,k))) +\n"
"                w * (0.5 * (angular_flux_out_1(aa,g,i,j,k) + angular_flux_in_1(aa,g,i,j,k))) +\n"
"                w * (0.5 * (angular_flux_out_2(aa,g,i,j,k) + angular_flux_in_2(aa,g,i,j,k))) +\n"
"                w * (0.5 * (angular_flux_out_3(aa,g,i,j,k) + angular_flux_in_3(aa,g,i,j,k))) +\n"
"                w * (0.5 * (angular_flux_out_4(aa,g,i,j,k) + angular_flux_in_4(aa,g,i,j,k))) +\n"
"                w * (0.5 * (angular_flux_out_5(aa,g,i,j,k) + angular_flux_in_5(aa,g,i,j,k))) +\n"
"                w * (0.5 * (angular_flux_out_6(aa,g,i,j,k) + angular_flux_in_6(aa,g,i,j,k))) +\n"
"                w * (0.5 * (angular_flux_out_7(aa,g,i,j,k) + angular_flux_in_7(aa,g,i,j,k)));\n"
"        }\n"
"        else\n"
"        {\n"
"            local_scalar[a] +=\n"
"                w * angular_flux_out_0(aa,g,i,j,k) +\n"
"                w * angular_flux_out_1(aa,g,i,j,k) +\n"
"                w * angular_flux_out_2(aa,g,i,j,k) +\n"
"                w * angular_flux_out_3(aa,g,i,j,k) +\n"
"                w * angular_flux_out_4(aa,g,i,j,k) +\n"
"                w * angular_flux_out_5(aa,g,i,j,k) +\n"
"                w * angular_flux_out_6(aa,g,i,j,k) +\n"
"                w * angular_flux_out_7(aa,g,i,j,k);\n"
"        }\n"
"    }\n"
"\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"\n"
"    // Reduce in local memory\n"
"    for (unsigned int offset = get_local_size(0) / 2; offset > 0; offset /= 2)\n"
"    {\n"
"        if (a < offset)\n"
"        {\n"
"            local_scalar[a] += local_scalar[a + offset];\n"
"        }\n"
"        barrier(CLK_LOCAL_MEM_FENCE);\n"
"    }\n"
"\n"
"    // Save result\n"
"    if (a == 0)\n"
"    {\n"
"        scalar_flux(g,i,j,k) = local_scalar[0];\n"
"    }\n"
"\n"
"}\n"
};
